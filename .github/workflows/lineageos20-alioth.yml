name: 编译Lineage20红米K40-Kernelsu-Lxc-Docker内核

on:
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v3

    - name: 构建编译内核环境
      run: |
        sudo apt-get update
        sudo -E apt-get -y -qq install git make bc bison ccache openssl dos2unix zip kmod cpio flex libelf-dev curl libssl-dev libtfm-dev wget device-tree-compiler ca-certificates python3 python2 binutils binutils-aarch64-linux-gnu binutils-arm-linux-gnueabi
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace
    
    - name: 下载编译环境
      run: |
        mkdir -p $GITHUB_WORKSPACE/prebuilts
        cd $GITHUB_WORKSPACE/prebuilts
        git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9.git
        git clone --depth=1 https://github.com/LineageOS/android_prebuilts_clang_kernel_linux-x86_clang-r416183b.git

    - name: 下载内核源码
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/EngMoPro/android_kernel_xiaomi_alioth.git android-kernel --depth=1


    - name: 开启lxc和docker配置
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        wget https://github.com/wu17481748/lxc-docker/releases/download/lxc-docker-2config/LXC-DOCKER-OPEN-CONFIG.sh
        chmod 777 LXC-DOCKER-OPEN-CONFIG.sh
        ./LXC-DOCKER-OPEN-CONFIG.sh android-kernel/arch/arm64/configs/alioth-lineage_defconfig -w

    - name: 安装 ksu
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.5

               
    - name: 设置ccache缓存
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: build-kernel-mido-kernel
        max-size: 2G


    - name: 开始编译内核
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        export PATH=$GITHUB_WORKSPACE/prebuilts/android_prebuilts_clang_kernel_linux-x86_clang-r416183b/bin:$GITHUB_WORKSPACE/prebuilts/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9/bin:$PATH
        export KBUILD_BUILD_HOST=17
        export KBUILD_BUILD_USER=HyperPower
        make -s -j$(nproc --all) O=out ARCH=arm64 SUBARCH=arm64 alioth-lineage_defconfig
        make -j$(nproc --all) CC="ccache clang" O=out ARCH=arm64 SUBARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-android- CROSS_COMPILE_ARM32=arm-linux-androideabi-
                

    - name: 制作Anykernel3卡刷包
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/osm0sis/AnyKernel3.git
        cd AnyKernel3
        git checkout 87d6fc9
        cd ..
        sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
        sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
        sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
        cp android-kernel/out/arch/arm64/boot/Image AnyKernel3/
        rm -rf AnyKernel3/.git* AnyKernel3/README.md
                  
    - name: 上传 Anykernel3
      uses: actions/upload-artifact@v3
      with:
        name: TWRP-卡刷包
        path: kernel_workspace/AnyKernel3/*
        
        
    # - name: 上传编译内核
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: Image
    #     path: kernel_workspace/android-kernel/out/arch/arm64/boot/Image

    # - name: 上传编译内核
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: Image.gz-dtb
    #     path: kernel_workspace/android-kernel/out/arch/arm64/boot/Image.gz-dtb    
      
